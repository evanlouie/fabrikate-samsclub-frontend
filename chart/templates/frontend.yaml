apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-fe-deployment
  labels:
    app: react-fe
spec:
  replicas: {{ .Values.react.replicaCount }}
  selector:
    matchLabels:
      app: react-fe
  template:
    metadata:
      annotations:
        traffic.sidecar.istio.io/excludeOutboundIPRanges: {{ .Values.react.istio.egressRange }} # Allow all Egress traffic https://github.com/istio/istio/issues/9304
      labels:
        app: react-fe
    spec:
      containers:
        - name: react-fe
          image: "{{ .Values.react.image.repository }}:{{ .Values.react.image.tag }}"
          imagePullPolicy: {{ .Values.react.image.pullPolicy }}
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: react-fe
spec:
  ports:
    - port: 80
  selector:
    app: react-fe

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vivaldi-deployment
  labels:
    app: vivaldi
spec:
  replicas: {{ .Values.vivaldi.replicaCount }}
  selector:
    matchLabels:
      app: vivaldi
  template:
    metadata:
      annotations:
        traffic.sidecar.istio.io/excludeOutboundIPRanges: {{ .Values.vivaldi.istio.egressRange }} # Allow all Egress traffic https://github.com/istio/istio/issues/9304
      labels:
        app: vivaldi
    spec:
      containers:
        - name: vivaldi
          image: "{{ .Values.vivaldi.image.repository }}:{{ .Values.vivaldi.image.tag }}"
          imagePullPolicy: {{ .Values.vivaldi.image.pullPolicy }}
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: vivaldi
spec:
  ports:
    - port: 80
  selector:
    app: vivaldi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opus-backend-deployment
  labels:
    app: opus-backend
spec:
  replicas: {{ .Values.opus.backend.replicaCount }}
  selector:
    matchLabels:
      app: opus-backend
  template:
    metadata:
      annotations:
        traffic.sidecar.istio.io/excludeOutboundIPRanges: 0.0.0.0/0 # Allow all Egress traffic https://github.com/istio/istio/issues/9304
      labels:
        app: opus-backend
    spec:
      containers:
        - name: opus-backend
          image: "{{ .Values.opus.backend.image.repository }}:{{ .Values.opus.backend.image.tag }}"
          imagePullPolicy: {{ .Values.opus.backend.image.pullPolicy }}
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: opus-backend
spec:
  ports:
    - port: 80
  selector:
    app: opus-backend

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opus-frontend-deployment
  labels:
    app: opus-frontend
spec:
  replicas: {{ .Values.opus.client.replicaCount }}
  selector:
    matchLabels:
      app: opus-frontend
  template:
    metadata:
      labels:
        app: opus-frontend
    spec:
      containers:
        - name: opus-frontend
          image: "{{ .Values.opus.client.image.repository }}:{{ .Values.opus.client.image.tag }}"
          imagePullPolicy: {{ .Values.opus.client.image.pullPolicy }}
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: opus-frontend
spec:
  ports:
    - port: 80
  selector:
    app: opus-frontend

---
# Add routing rules for the existing Gateway included with Istio
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: sams-fe-route-rules
spec:
  # https://istio.io/docs/reference/config/istio.networking.v1alpha3/#VirtualService
  gateways: # The default `mesh` value for when left blank is doesn't seem to propigate the rule properly. For now, always use a list of FQDN gateways
    - istio-autogenerated-k8s-ingress.istio-system.svc.cluster.local # must be FQDN if VirtualService in different NS than Gateway
  hosts:
    - "*"
  http:
    - route: # This rule will pickup all other requests because it doesn't have a `match`
        - destination:
            port:
              number: 80
            host: react-fe.default.svc.cluster.local
